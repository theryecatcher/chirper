// Code generated by protoc-gen-go. DO NOT EDIT.
// source: userservice.proto

package userdpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NewUserRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=Email,json=email" json:"Email,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=Password,json=password" json:"Password,omitempty"`
}

func (m *NewUserRequest) Reset()                    { *m = NewUserRequest{} }
func (m *NewUserRequest) String() string            { return proto.CompactTextString(m) }
func (*NewUserRequest) ProtoMessage()               {}
func (*NewUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *NewUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *NewUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type NewUserResponse struct {
}

func (m *NewUserResponse) Reset()                    { *m = NewUserResponse{} }
func (m *NewUserResponse) String() string            { return proto.CompactTextString(m) }
func (*NewUserResponse) ProtoMessage()               {}
func (*NewUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type GetUserRequest struct {
	UID string `protobuf:"bytes,1,opt,name=UID,json=uID" json:"UID,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetUserRequest) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

type GetUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=User,json=user" json:"User,omitempty"`
}

func (m *GetUserResponse) Reset()                    { *m = GetUserResponse{} }
func (m *GetUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUserResponse) ProtoMessage()               {}
func (*GetUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type ValidateUserRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=Email,json=email" json:"Email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,json=password" json:"Password,omitempty"`
}

func (m *ValidateUserRequest) Reset()                    { *m = ValidateUserRequest{} }
func (m *ValidateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidateUserRequest) ProtoMessage()               {}
func (*ValidateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ValidateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ValidateUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type FollowUserRequest struct {
	UID         string `protobuf:"bytes,1,opt,name=UID,json=uID" json:"UID,omitempty"`
	FollowerUID string `protobuf:"bytes,2,opt,name=FollowerUID,json=followerUID" json:"FollowerUID,omitempty"`
}

func (m *FollowUserRequest) Reset()                    { *m = FollowUserRequest{} }
func (m *FollowUserRequest) String() string            { return proto.CompactTextString(m) }
func (*FollowUserRequest) ProtoMessage()               {}
func (*FollowUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *FollowUserRequest) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *FollowUserRequest) GetFollowerUID() string {
	if m != nil {
		return m.FollowerUID
	}
	return ""
}

type FollowUserResponse struct {
}

func (m *FollowUserResponse) Reset()                    { *m = FollowUserResponse{} }
func (m *FollowUserResponse) String() string            { return proto.CompactTextString(m) }
func (*FollowUserResponse) ProtoMessage()               {}
func (*FollowUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type FollowerDetailsRequest struct {
	UID string `protobuf:"bytes,1,opt,name=UID,json=uID" json:"UID,omitempty"`
}

func (m *FollowerDetailsRequest) Reset()                    { *m = FollowerDetailsRequest{} }
func (m *FollowerDetailsRequest) String() string            { return proto.CompactTextString(m) }
func (*FollowerDetailsRequest) ProtoMessage()               {}
func (*FollowerDetailsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *FollowerDetailsRequest) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

type FollowerDetailsResponse struct {
	Followers []*FollowerDetails `protobuf:"bytes,1,rep,name=Followers,json=followers" json:"Followers,omitempty"`
}

func (m *FollowerDetailsResponse) Reset()                    { *m = FollowerDetailsResponse{} }
func (m *FollowerDetailsResponse) String() string            { return proto.CompactTextString(m) }
func (*FollowerDetailsResponse) ProtoMessage()               {}
func (*FollowerDetailsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *FollowerDetailsResponse) GetFollowers() []*FollowerDetails {
	if m != nil {
		return m.Followers
	}
	return nil
}

func init() {
	proto.RegisterType((*NewUserRequest)(nil), "NewUserRequest")
	proto.RegisterType((*NewUserResponse)(nil), "NewUserResponse")
	proto.RegisterType((*GetUserRequest)(nil), "GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "GetUserResponse")
	proto.RegisterType((*ValidateUserRequest)(nil), "ValidateUserRequest")
	proto.RegisterType((*FollowUserRequest)(nil), "FollowUserRequest")
	proto.RegisterType((*FollowUserResponse)(nil), "FollowUserResponse")
	proto.RegisterType((*FollowerDetailsRequest)(nil), "FollowerDetailsRequest")
	proto.RegisterType((*FollowerDetailsResponse)(nil), "FollowerDetailsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Userd service

type UserdClient interface {
	NewUser(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*NewUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	ValidateUser(ctx context.Context, in *ValidateUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error)
	GetAllFollowers(ctx context.Context, in *FollowerDetailsRequest, opts ...grpc.CallOption) (*FollowerDetailsResponse, error)
}

type userdClient struct {
	cc *grpc.ClientConn
}

func NewUserdClient(cc *grpc.ClientConn) UserdClient {
	return &userdClient{cc}
}

func (c *userdClient) NewUser(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*NewUserResponse, error) {
	out := new(NewUserResponse)
	err := grpc.Invoke(ctx, "/Userd/NewUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userdClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/Userd/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userdClient) ValidateUser(ctx context.Context, in *ValidateUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/Userd/ValidateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userdClient) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error) {
	out := new(FollowUserResponse)
	err := grpc.Invoke(ctx, "/Userd/FollowUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userdClient) GetAllFollowers(ctx context.Context, in *FollowerDetailsRequest, opts ...grpc.CallOption) (*FollowerDetailsResponse, error) {
	out := new(FollowerDetailsResponse)
	err := grpc.Invoke(ctx, "/Userd/GetAllFollowers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Userd service

type UserdServer interface {
	NewUser(context.Context, *NewUserRequest) (*NewUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	ValidateUser(context.Context, *ValidateUserRequest) (*GetUserResponse, error)
	FollowUser(context.Context, *FollowUserRequest) (*FollowUserResponse, error)
	GetAllFollowers(context.Context, *FollowerDetailsRequest) (*FollowerDetailsResponse, error)
}

func RegisterUserdServer(s *grpc.Server, srv UserdServer) {
	s.RegisterService(&_Userd_serviceDesc, srv)
}

func _Userd_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdServer).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Userd/NewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdServer).NewUser(ctx, req.(*NewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userd_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Userd/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userd_ValidateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdServer).ValidateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Userd/ValidateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdServer).ValidateUser(ctx, req.(*ValidateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userd_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Userd/FollowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdServer).FollowUser(ctx, req.(*FollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userd_GetAllFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowerDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdServer).GetAllFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Userd/GetAllFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdServer).GetAllFollowers(ctx, req.(*FollowerDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Userd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Userd",
	HandlerType: (*UserdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewUser",
			Handler:    _Userd_NewUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Userd_GetUser_Handler,
		},
		{
			MethodName: "ValidateUser",
			Handler:    _Userd_ValidateUser_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _Userd_FollowUser_Handler,
		},
		{
			MethodName: "GetAllFollowers",
			Handler:    _Userd_GetAllFollowers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userservice.proto",
}

func init() { proto.RegisterFile("userservice.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x4f, 0x6f, 0xaa, 0x40,
	0x14, 0xc5, 0x83, 0xe0, 0x7b, 0x7a, 0x79, 0x11, 0xbd, 0x1a, 0x25, 0x6c, 0x9e, 0x61, 0x65, 0x5e,
	0x5e, 0x66, 0x41, 0xff, 0xec, 0x9b, 0xd0, 0x1a, 0x37, 0xb6, 0x31, 0xd1, 0xfd, 0xb4, 0xdc, 0x26,
	0x24, 0xa3, 0x58, 0x06, 0xeb, 0x57, 0xe9, 0xc7, 0x6d, 0x06, 0x46, 0x44, 0xd4, 0xee, 0xb8, 0x73,
	0xcf, 0xbd, 0x73, 0x38, 0x3f, 0x80, 0xde, 0x4e, 0x52, 0x2a, 0x29, 0xfd, 0x8c, 0xdf, 0x88, 0x6d,
	0xd3, 0x24, 0x4b, 0x3c, 0x5b, 0x1d, 0x45, 0x45, 0xe1, 0xaf, 0xa0, 0x33, 0xa7, 0xfd, 0x52, 0x52,
	0xba, 0xa0, 0x8f, 0x1d, 0xc9, 0x0c, 0x11, 0xac, 0x39, 0x5f, 0x93, 0x6b, 0x8c, 0x8d, 0x49, 0x7b,
	0x61, 0x6d, 0xf8, 0x9a, 0x70, 0x00, 0xcd, 0xc7, 0x35, 0x8f, 0x85, 0xdb, 0xc8, 0x0f, 0x9b, 0xa4,
	0x0a, 0xf4, 0xa0, 0xf5, 0xc2, 0xa5, 0xdc, 0x27, 0x69, 0xe4, 0x9a, 0x79, 0xa3, 0xb5, 0xd5, 0xb5,
	0xdf, 0x03, 0xa7, 0xdc, 0x2b, 0xb7, 0xc9, 0x46, 0x92, 0xef, 0x43, 0x67, 0x4a, 0x59, 0xf5, 0xaa,
	0x2e, 0x98, 0xcb, 0x59, 0xa8, 0x6f, 0x32, 0x77, 0xb3, 0xd0, 0x0f, 0xc0, 0x29, 0x35, 0xc5, 0x18,
	0xfe, 0x05, 0x4b, 0xd5, 0xb9, 0xca, 0x0e, 0x6c, 0x56, 0xb8, 0xcf, 0x25, 0x96, 0x7a, 0xf6, 0xa7,
	0xd0, 0x5f, 0x71, 0x11, 0x47, 0x3c, 0xa3, 0xea, 0xf2, 0xd2, 0xb3, 0x71, 0xcd, 0x73, 0xa3, 0xe6,
	0x79, 0x0a, 0xbd, 0xa7, 0x44, 0x88, 0x64, 0xff, 0xa3, 0x47, 0x1c, 0x83, 0x5d, 0xc8, 0x28, 0x55,
	0x9d, 0x62, 0x8b, 0xfd, 0x7e, 0x3c, 0xf2, 0x07, 0x80, 0xd5, 0x45, 0xfa, 0xfd, 0xff, 0xc1, 0xf0,
	0x30, 0x17, 0x52, 0xc6, 0x63, 0x21, 0xaf, 0xe7, 0xf0, 0x0c, 0xa3, 0x33, 0xad, 0xce, 0xe3, 0x16,
	0xda, 0x87, 0x96, 0x74, 0x8d, 0xb1, 0x39, 0xb1, 0x83, 0xa1, 0x0e, 0xa5, 0x3e, 0xd2, 0x3e, 0x98,
	0x92, 0xc1, 0x57, 0x03, 0x9a, 0xca, 0x4d, 0x84, 0xff, 0xe1, 0xb7, 0x26, 0x83, 0x0e, 0x3b, 0x65,
	0xef, 0x75, 0x59, 0x0d, 0x9a, 0x52, 0x6b, 0x20, 0xe8, 0xb0, 0x53, 0x7c, 0x5e, 0x97, 0xd5, 0x59,
	0xdd, 0xc3, 0x9f, 0x2a, 0x0a, 0x1c, 0xb0, 0x0b, 0x64, 0x2e, 0xcc, 0xdd, 0x01, 0x1c, 0x03, 0x43,
	0x64, 0x67, 0x18, 0xbc, 0x3e, 0x3b, 0x4f, 0x14, 0xc3, 0xfc, 0x6b, 0x79, 0x10, 0xa2, 0x0c, 0x04,
	0x47, 0xec, 0x72, 0xc6, 0x9e, 0xcb, 0xae, 0x04, 0xfa, 0xfa, 0x2b, 0xff, 0x13, 0x6e, 0xbe, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xef, 0x1b, 0x20, 0xad, 0x2b, 0x03, 0x00, 0x00,
}
