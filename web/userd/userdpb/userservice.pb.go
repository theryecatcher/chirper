// Code generated by protoc-gen-go. DO NOT EDIT.
// source: userservice.proto

package userdpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NewUserRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=Email,json=email" json:"Email,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=Password,json=password" json:"Password,omitempty"`
}

func (m *NewUserRequest) Reset()                    { *m = NewUserRequest{} }
func (m *NewUserRequest) String() string            { return proto.CompactTextString(m) }
func (*NewUserRequest) ProtoMessage()               {}
func (*NewUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *NewUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *NewUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type NewUserResponse struct {
	Response bool `protobuf:"varint,1,opt,name=Response,json=response" json:"Response,omitempty"`
}

func (m *NewUserResponse) Reset()                    { *m = NewUserResponse{} }
func (m *NewUserResponse) String() string            { return proto.CompactTextString(m) }
func (*NewUserResponse) ProtoMessage()               {}
func (*NewUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *NewUserResponse) GetResponse() bool {
	if m != nil {
		return m.Response
	}
	return false
}

type GetUserRequest struct {
	Email string `protobuf:"bytes,1,opt,name=Email,json=email" json:"Email,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type GetUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=User,json=user" json:"User,omitempty"`
}

func (m *GetUserResponse) Reset()                    { *m = GetUserResponse{} }
func (m *GetUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUserResponse) ProtoMessage()               {}
func (*GetUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*NewUserRequest)(nil), "NewUserRequest")
	proto.RegisterType((*NewUserResponse)(nil), "NewUserResponse")
	proto.RegisterType((*GetUserRequest)(nil), "GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "GetUserResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Contentd service

type ContentdClient interface {
	NewUser(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*NewUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
}

type contentdClient struct {
	cc *grpc.ClientConn
}

func NewContentdClient(cc *grpc.ClientConn) ContentdClient {
	return &contentdClient{cc}
}

func (c *contentdClient) NewUser(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*NewUserResponse, error) {
	out := new(NewUserResponse)
	err := grpc.Invoke(ctx, "/Contentd/NewUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentdClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/Contentd/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Contentd service

type ContentdServer interface {
	NewUser(context.Context, *NewUserRequest) (*NewUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
}

func RegisterContentdServer(s *grpc.Server, srv ContentdServer) {
	s.RegisterService(&_Contentd_serviceDesc, srv)
}

func _Contentd_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentdServer).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contentd/NewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentdServer).NewUser(ctx, req.(*NewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contentd_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentdServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contentd/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentdServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Contentd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Contentd",
	HandlerType: (*ContentdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewUser",
			Handler:    _Contentd_NewUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Contentd_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userservice.proto",
}

func init() { proto.RegisterFile("userservice.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x59, 0x4d, 0x6d, 0x9c, 0x85, 0xa6, 0x06, 0x0f, 0x4b, 0x2e, 0x4a, 0x0e, 0xe2, 0xa1,
	0xe6, 0xb0, 0xfe, 0x04, 0x11, 0x6f, 0x45, 0x16, 0xf4, 0x1e, 0xdd, 0x11, 0x0a, 0x6e, 0xb2, 0x66,
	0x52, 0xfb, 0xf7, 0x25, 0x69, 0x5c, 0xda, 0xde, 0xe6, 0x4d, 0x1e, 0xef, 0x7d, 0x13, 0xb8, 0xda,
	0x12, 0x06, 0xc2, 0xf0, 0xbb, 0xf9, 0x44, 0x33, 0x06, 0x1f, 0xbd, 0xaa, 0xd3, 0xaa, 0xdf, 0x0b,
	0xfd, 0x0e, 0x8b, 0x35, 0xee, 0xde, 0x08, 0x43, 0x87, 0x3f, 0x5b, 0xa4, 0x28, 0x25, 0xb0, 0xb5,
	0x1d, 0xb0, 0xa9, 0x6e, 0xab, 0xfb, 0xcb, 0x8e, 0x39, 0x3b, 0xa0, 0xbc, 0x86, 0xd9, 0xf3, 0x60,
	0x37, 0xdf, 0xcd, 0x59, 0x5e, 0xce, 0x30, 0x09, 0xa9, 0x80, 0xbf, 0x5a, 0xa2, 0x9d, 0x0f, 0x7d,
	0x73, 0x9e, 0x1f, 0xf8, 0x58, 0xb4, 0x7e, 0x00, 0x31, 0xe5, 0xd2, 0xe8, 0x1d, 0x61, 0xb2, 0xff,
	0xcf, 0x39, 0x9c, 0x77, 0x3c, 0x14, 0xad, 0xef, 0x60, 0xf1, 0x82, 0xf1, 0x10, 0x63, 0xaa, 0xac,
	0x0e, 0x2a, 0x75, 0x0b, 0x62, 0xf2, 0x95, 0xd8, 0x1b, 0x60, 0x49, 0x67, 0x5f, 0xdd, 0xd6, 0x66,
	0x7f, 0x5d, 0xb6, 0xb0, 0x34, 0xb7, 0x5f, 0xc0, 0x9f, 0xbc, 0x8b, 0xe8, 0x62, 0x2f, 0x57, 0x30,
	0x2f, 0x58, 0x52, 0x98, 0xe3, 0xc3, 0xd5, 0xd2, 0x9c, 0x12, 0xaf, 0x60, 0x5e, 0xda, 0xa4, 0x30,
	0xc7, 0x7c, 0x6a, 0x69, 0x4e, 0x40, 0x3e, 0x2e, 0xf2, 0x8f, 0x3e, 0xfe, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x29, 0x86, 0x2f, 0x1f, 0x73, 0x01, 0x00, 0x00,
}
